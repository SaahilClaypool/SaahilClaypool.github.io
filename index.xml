<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://saahilclaypool.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Jun 2020 04:11:00 -0400</lastBuildDate>
    
	<atom:link href="https://saahilclaypool.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating this site</title>
      <link>https://saahilclaypool.github.io/this_site/01_quickstart/</link>
      <pubDate>Sun, 28 Jun 2020 04:14:31 -0400</pubDate>
      
      <guid>https://saahilclaypool.github.io/this_site/01_quickstart/</guid>
      <description>&lt;p&gt;How to build this site&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dotnet interactive as a rails-console replacement</title>
      <link>https://saahilclaypool.github.io/csharp/dotnet_interactive/</link>
      <pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://saahilclaypool.github.io/csharp/dotnet_interactive/</guid>
      <description>&lt;p&gt;The tool I miss most when not using ruby-on-rails (which I use at my day-job) is the &lt;a href=&#34;https://guides.rubyonrails.org/command_line.html&#34;&gt;rails console&lt;/a&gt;.
My main use for the console is to write queries in the same ORM language as the rest of my application.
For example, I might drop into the rails console to see the raw output of a query like &lt;code&gt;Course.where(&#39;start_date &amp;lt; DateTime.now - 1.year&#39;)&lt;/code&gt;.
Or, if I need to create some fake data, I could drop into another console and run something like &lt;code&gt;Course.last.update(start_date: DateTime.now - 2.year)&lt;/code&gt;.
Both of these would be easy enough to do in SQL, but by using the same language as the application ORM lets me use all of the helper functions and snippets that might be present in the application.&lt;/p&gt;
&lt;p&gt;Recently, I&amp;rsquo;ve tried to approximate this workflow using &lt;a href=&#34;https://github.com/dotnet/interactive&#34;&gt;dotnet interactive&lt;/a&gt;, and I&amp;rsquo;ll describe that setup below.
The finished result can be found
&lt;a href=&#34;https://github.com/SaahilClaypool/BookyAPI/blob/221c8fc847ca2ba28b4347f6a094b52fc9a59b6d/Scratch.ipynb&#34;&gt;here&lt;/a&gt;(github).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://saahilclaypool.github.io/BookyInteractive.png&#34; alt=&#34;Interactive Example&#34;&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Experiments &amp; Architectural Process</title>
      <link>https://saahilclaypool.github.io/architecture/architecture_process/</link>
      <pubDate>Sun, 13 Sep 2020 18:09:50 -0400</pubDate>
      
      <guid>https://saahilclaypool.github.io/architecture/architecture_process/</guid>
      <description>&lt;p&gt;It sometimes takes working on an application with a &lt;em&gt;bad&lt;/em&gt; architectural design to realize that you never want to work on such a project again.
But, &lt;em&gt;how&lt;/em&gt; does a programmer make sure their application doesn&amp;rsquo;t become &lt;em&gt;that project&lt;/em&gt;?&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configure Await</title>
      <link>https://saahilclaypool.github.io/csharp/configure_await/</link>
      <pubDate>Sun, 09 Aug 2020 18:09:50 -0400</pubDate>
      
      <guid>https://saahilclaypool.github.io/csharp/configure_await/</guid>
      <description>&lt;p&gt;Reading through a &lt;a href=&#34;https://github.com/ivanpaulovich/clean-architecture-manga/tree/dotnet5&#34;&gt;asp.net core project&lt;/a&gt;,
I came across number of calls that looked like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affectedRows&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;await&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_context&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SaveChangesAsync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConfigureAwait&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ME: what does this do?
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;affectedRows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I dug into what this was actually doing by reading &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/configureawait-faq/&#34;&gt;this blog&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;await&lt;/code&gt; uses a custom callback strategy based on the calling context&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConfigureAwait(false)&lt;/code&gt; ignores the custom strategy.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Ubiquitious Language - &#39;Software Architect&#39;s Handbook&#39;</title>
      <link>https://saahilclaypool.github.io/architecture/ubiquitous_language/</link>
      <pubDate>Mon, 13 Jul 2020 18:09:50 -0400</pubDate>
      
      <guid>https://saahilclaypool.github.io/architecture/ubiquitous_language/</guid>
      <description>&lt;p&gt;Ubiquitous Language and the imortance of just &lt;em&gt;agreeing&lt;/em&gt; on what to call things.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Dotnet query console</title>
      <link>https://saahilclaypool.github.io/csharp/query_console/</link>
      <pubDate>Sat, 11 Jul 2020 18:09:50 -0400</pubDate>
      
      <guid>https://saahilclaypool.github.io/csharp/query_console/</guid>
      <description>&lt;p&gt;As I&amp;rsquo;ve developed with Rails, the feature I&amp;rsquo;ve come to appreciate the most is the &lt;code&gt;rails console&lt;/code&gt;.
It gives you an immediately connected view into your application - fully hooked up to all of your code and to your database.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>